name: TRPG E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'apps/proxy-server/**'
      - '.github/workflows/trpg-e2e-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/frontend/**'
      - 'apps/proxy-server/**'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - core
        - session
        - performance
        - mobile
        - smoke

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache dependencies
        id: cache-keys
        run: |
          echo "key=${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

  trpg-core-tests:
    name: TRPG Core Functionality Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'comprehensive' || github.event.inputs.test_suite == 'core' }}
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          # Start proxy server
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          
          # Start frontend server
          cd ../frontend
          pnpm run build
          pnpm run preview &
          
          # Wait for servers to be ready
          sleep 30

      - name: Run TRPG Core Tests
        working-directory: apps/frontend
        run: |
          case ${{ matrix.shard }} in
            1) pnpm run test:trpg-campaign ;;
            2) pnpm run test:trpg-characters ;;
            3) pnpm run test:trpg-world ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trpg-core-results-${{ matrix.shard }}
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: trpg-core-screenshots-${{ matrix.shard }}
          path: apps/frontend/e2e/screenshots/
          retention-days: 3

  trpg-session-tests:
    name: TRPG Session Management Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'comprehensive' || github.event.inputs.test_suite == 'session' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          cd ../frontend
          pnpm run build
          pnpm run preview &
          sleep 30

      - name: Run TRPG Session Tests
        working-directory: apps/frontend
        run: pnpm run test:trpg-session

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trpg-session-results
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 7

  trpg-performance-tests:
    name: TRPG Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'comprehensive' || github.event.inputs.test_suite == 'performance' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          cd ../frontend
          pnpm run build
          pnpm run preview &
          sleep 30

      - name: Run Performance Tests
        working-directory: apps/frontend
        run: pnpm run test:trpg-performance

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trpg-performance-results
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 30

      - name: Comment performance results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = 'apps/frontend/test-results/trpg-test-report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const loadTime = report.performance.averageLoadTime;
              const memoryUsage = report.performance.memoryUsage.memoryIncrease || 0;
              
              const comment = `## 🎲 TRPG Performance Test Results
              
              | Metric | Value | Status |
              |--------|--------|--------|
              | Average Load Time | ${loadTime}ms | ${loadTime < 5000 ? '✅' : '⚠️'} |
              | Memory Increase | ${memoryUsage.toFixed(2)}MB | ${memoryUsage < 30 ? '✅' : '⚠️'} |
              | Test Pass Rate | ${Math.round((report.summary.passed / report.summary.total) * 100)}% | ${report.summary.failed === 0 ? '✅' : '❌'} |
              
              ${report.recommendations.length > 0 ? '### 💡 Recommendations:\n' + report.recommendations.map(r => `- ${r}`).join('\n') : ''}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  trpg-mobile-tests:
    name: TRPG Mobile Experience Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'comprehensive' || github.event.inputs.test_suite == 'mobile' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          cd ../frontend
          pnpm run build
          pnpm run preview &
          sleep 30

      - name: Run Mobile Tests
        working-directory: apps/frontend
        run: pnpm run test:trpg-mobile

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trpg-mobile-results
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 7

  trpg-smoke-tests:
    name: TRPG Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == 'smoke' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          cd ../frontend
          pnpm run build
          pnpm run preview &
          sleep 30

      - name: Run Smoke Tests
        working-directory: apps/frontend
        run: pnpm run test:trpg-smoke

  accessibility-tests:
    name: TRPG Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.test_suite == '' || github.event.inputs.test_suite == 'comprehensive' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Playwright browsers
        working-directory: apps/frontend
        run: pnpm exec playwright install --with-deps chromium

      - name: Start application servers
        run: |
          cd apps/proxy-server
          pnpm run build
          pnpm run start:test &
          cd ../frontend
          pnpm run build
          pnpm run preview &
          sleep 30

      - name: Run Accessibility Tests
        working-directory: apps/frontend
        run: pnpm run test:accessibility

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trpg-accessibility-results
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 7

  generate-report:
    name: Generate Comprehensive Test Report
    runs-on: ubuntu-latest
    needs: [trpg-core-tests, trpg-session-tests, trpg-performance-tests, trpg-mobile-tests, accessibility-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Generate comprehensive report
        working-directory: apps/frontend
        run: |
          # Merge all test results
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const mergedResults = {
              summary: { total: 0, passed: 0, failed: 0, skipped: 0 },
              tests: [],
              performance: {},
              recommendations: []
            };
            
            // Process all result files
            const artifactDirs = fs.readdirSync('../../test-artifacts');
            artifactDirs.forEach(dir => {
              const resultPath = path.join('../../test-artifacts', dir, 'test-results', 'results.json');
              if (fs.existsSync(resultPath)) {
                const result = JSON.parse(fs.readFileSync(resultPath));
                mergedResults.tests.push(...(result.tests || []));
                mergedResults.summary.total += result.summary?.total || 0;
                mergedResults.summary.passed += result.summary?.passed || 0;
                mergedResults.summary.failed += result.summary?.failed || 0;
                mergedResults.summary.skipped += result.summary?.skipped || 0;
              }
            });
            
            fs.writeFileSync('test-results/merged-results.json', JSON.stringify(mergedResults, null, 2));
          "

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: trpg-comprehensive-report
          path: |
            apps/frontend/test-results/
            apps/frontend/playwright-report/
          retention-days: 30

      - name: Create test summary
        run: |
          cd apps/frontend
          echo "# 🎲 TRPG E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Core Tests | ${{ needs.trpg-core-tests.result }} | Campaign, Character, World Building |" >> $GITHUB_STEP_SUMMARY
          echo "| Session Tests | ${{ needs.trpg-session-tests.result }} | Session Management, Dice Rolling, AI |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.trpg-performance-tests.result }} | Load Times, Memory Usage, Responsiveness |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile Tests | ${{ needs.trpg-mobile-tests.result }} | Touch Interactions, Responsive Design |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result }} | WCAG Compliance, Screen Readers |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- [Comprehensive Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Screenshots and Videos](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Send Test Notifications
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "🚨 TRPG E2E tests have failed. Please check the test results and fix any issues."
          # Add Slack/Discord webhook notification here if needed

      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "✅ All TRPG E2E tests have passed successfully!"
          # Add success notification here if needed