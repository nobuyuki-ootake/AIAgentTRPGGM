import { chromium, FullConfig } from "@playwright/test";
import fs from "fs";
import path from "path";

/**
 * Global teardown for TRPG E2E testing framework
 * Cleans up test data and generates final reports
 */
async function globalTeardown(config: FullConfig) {
  console.log("üé≤ TRPG E2E Test Framework - Global Teardown Starting...");

  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // 1. Generate test execution summary
    console.log("üìä Generating test execution summary...");
    
    const baseURL = config.projects[0].use.baseURL || "http://localhost:5173";
    
    try {
      await page.goto(baseURL);
      
      // Collect final test data and metrics
      const testSummary = await page.evaluate(() => {
        const testData = localStorage.getItem('trpg-test-data');
        const performanceData = localStorage.getItem('trpg-performance-data');
        
        return {
          testData: testData ? JSON.parse(testData) : null,
          performanceData: performanceData ? JSON.parse(performanceData) : null,
          teardownTimestamp: Date.now()
        };
      });

      // 2. Save test summary to file
      const summaryPath = path.join(process.cwd(), 'test-results', 'test-execution-summary.json');
      fs.mkdirSync(path.dirname(summaryPath), { recursive: true });
      fs.writeFileSync(summaryPath, JSON.stringify(testSummary, null, 2));
      console.log(`üìÑ Test summary saved to: ${summaryPath}`);

    } catch (error) {
      console.log("‚ö†Ô∏è Could not access application for teardown data collection:", error);
    }

    // 3. Clean up test artifacts
    console.log("üßπ Cleaning up test artifacts...");
    
    // Remove temporary screenshots older than 7 days
    const screenshotsDir = path.join(process.cwd(), 'e2e', 'screenshots');
    if (fs.existsSync(screenshotsDir)) {
      const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
      
      const files = fs.readdirSync(screenshotsDir);
      files.forEach(file => {
        const filePath = path.join(screenshotsDir, file);
        const stats = fs.statSync(filePath);
        
        if (stats.isFile() && stats.mtime.getTime() < sevenDaysAgo) {
          fs.unlinkSync(filePath);
          console.log(`üóëÔ∏è Removed old screenshot: ${file}`);
        }
      });
    }

    // 4. Generate performance report
    console.log("üìà Generating performance report...");
    
    const performanceReportPath = path.join(process.cwd(), 'test-results', 'performance-report.md');
    const performanceReport = `# TRPG E2E Test Performance Report

## Test Execution Summary
- **Execution Time**: ${new Date().toISOString()}
- **Test Projects**: ${config.projects.map(p => p.name).join(', ')}

## Key Metrics
- Campaign Creation Performance: To be measured
- Character Management Performance: To be measured  
- Session Management Performance: To be measured
- AI Integration Performance: To be measured

## Recommendations
- Monitor session state management performance
- Optimize AI response handling
- Consider caching strategies for character data

---
*Generated by TRPG E2E Testing Framework*
`;

    fs.writeFileSync(performanceReportPath, performanceReport);
    console.log(`üìà Performance report saved to: ${performanceReportPath}`);

    console.log("‚úÖ Global teardown completed successfully");

  } catch (error) {
    console.error("‚ùå Global teardown failed:", error);
    // Don't throw here as teardown failures shouldn't fail the entire test suite
  } finally {
    await browser.close();
  }
}

export default globalTeardown;