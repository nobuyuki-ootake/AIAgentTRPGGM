import { test, expect } from "@playwright/test";
import { 
  setupTRPGTestData, 
  navigateToTRPGHome, 
  createTRPGCharacter,
  cleanupTRPGTestData,
  verifyTRPGPageLoad,
  takeTRPGScreenshot,
  TRPGCharacter
} from "../utils/trpg-test-helpers";

/**
 * TRPG Character Management E2E Tests
 * 
 * Tests comprehensive character creation, editing, and management for PC/NPC/Enemy
 * Covers character sheets, attribute management, and character interactions
 */

test.describe("TRPG Character Management", () => {
  test.beforeEach(async ({ page }) => {
    await cleanupTRPGTestData(page);
    await setupTRPGTestData(page);
    await navigateToTRPGHome(page);
  });

  test.afterEach(async ({ page }) => {
    await cleanupTRPGTestData(page);
  });

  test("should create a new Player Character (PC) with full attributes", async ({ page }) => {
    console.log("üßô Testing: PC Creation with Full Attributes");

    await page.goto("/characters");
    await verifyTRPGPageLoad(page);
    await takeTRPGScreenshot(page, "characters-page-initial", "pc-creation");

    // Test creating a comprehensive PC
    const newPC: Partial<TRPGCharacter> = {
      name: "„ÉÜ„Çπ„ÉàÊà¶Â£´„Ç¢„É´„Éï„É¨„ÉÉ„Éâ",
      race: "„Éí„É•„Éº„Éû„É≥",
      class: "„Éï„Ç°„Ç§„Çø„Éº",
      level: 5,
      attributes: {
        strength: 18,
        dexterity: 14,
        constitution: 16,
        intelligence: 12,
        wisdom: 13,
        charisma: 10
      },
      background: "È®éÂ£´",
      personality: "Ê≠£Áæ©ÊÑü„ÅåÂº∑„Åè„ÄÅ‰ª≤ÈñìÊÄù„ÅÑ„ÅÆÊÄßÊ†º„ÄÇÂõ∞„Å£„Å¶„ÅÑ„Çã‰∫∫„ÇíË¶ãÈÅé„Åî„Åõ„Å™„ÅÑ„ÄÇ",
      appearance: "Ë∫´Èï∑185cm„ÄÅÁ≠ãËÇâË≥™„Å™‰ΩìÊ†º„ÄÇÈáëÈ´™„Å®Èùí„ÅÑÁû≥„ÅåÁâπÂæ¥ÁöÑ„ÄÇ",
      backstory: "ÁéãÂõΩ„ÅÆÈ®éÂ£´„Å®„Åó„Å¶Ë®ìÁ∑¥„ÇíÂèó„Åë„Åü„Åå„ÄÅÊîøÊ≤ªÁöÑÈô∞Ë¨Ä„Å´Â∑ª„ÅçËæº„Åæ„ÇåÈ®éÂ£´Âõ£„ÇíÈõ¢ËÑ±„ÄÇ‰ªä„ÅØËá™Áî±„Å™ÂÜíÈô∫ËÄÖ„Å®„Åó„Å¶Ê¥ªÂãï„Åó„Å¶„ÅÑ„Çã„ÄÇ"
    };

    await createTRPGCharacter(page, newPC, "PC");
    await takeTRPGScreenshot(page, "pc-created", "pc-creation");

    // Verify PC was created and appears in list
    await expect(page.locator(`text=${newPC.name}`)).toBeVisible();
    
    // Click on character to view details
    const characterCard = page.locator(`text=${newPC.name}`).first();
    await characterCard.click();
    await page.waitForTimeout(2000);
    await takeTRPGScreenshot(page, "pc-details-view", "pc-creation");

    // Verify character details are displayed
    await expect(page.locator(`text=${newPC.race}`)).toBeVisible();
    await expect(page.locator(`text=${newPC.class}`)).toBeVisible();
    await expect(page.locator(`text=${newPC.level}`)).toBeVisible();

    console.log("‚úÖ PC creation test completed");
  });

  test("should create and manage NPCs with different roles", async ({ page }) => {
    console.log("üë• Testing: NPC Creation and Management");

    await page.goto("/npcs");
    await verifyTRPGPageLoad(page);
    await takeTRPGScreenshot(page, "npcs-page-initial", "npc-management");

    // Create different types of NPCs
    const npcs: Partial<TRPGCharacter>[] = [
      {
        name: "ÂïÜ‰∫∫„ÇÆ„É´„Éê„Éº„Éà",
        race: "„Éí„É•„Éº„Éû„É≥",
        class: "ÂïÜ‰∫∫",
        level: 2,
        personality: "ÂïÜÂ£≤‰∏äÊâã„ÅßÊÉÖÂ†±ÈÄö„ÄÇÂ∏∏„Å´Âà©Áõä„ÇíËÄÉ„Åà„Å¶„ÅÑ„Çã„ÄÇ",
        backstory: "ÂêÑÂú∞„ÇíÊóÖ„Åô„ÇãË°åÂïÜ‰∫∫„ÄÇÊÉÖÂ†±„ÅÆÂ£≤Ë≤∑„ÇÇË°å„ÅÜ„ÄÇ",
        background: "ÂïÜ‰∫∫„ÇÆ„É´„Éâ"
      },
      {
        name: "È≠îÊ≥ï‰Ωø„ÅÑ„Éû„Éº„É™„É≥",
        race: "„Ç®„É´„Éï",
        class: "„Ç¶„Ç£„Ç∂„Éº„Éâ",
        level: 12,
        personality: "Áü•Ë≠òË±äÂØå„ÅßÁ•ûÁßòÁöÑ„ÄÇÂè§‰ª£„ÅÆÁßòÂØÜ„ÇíÁü•„Å£„Å¶„ÅÑ„Çã„ÄÇ",
        backstory: "Âè§‰ª£È≠îÊ≥ï„ÅÆÁ†îÁ©∂ËÄÖ„ÄÇ„Éó„É¨„Ç§„É§„Éº„Åü„Å°„ÅÆÂä©Ë®ÄËÄÖ„Å®„Åó„Å¶Ê¥ªÂãï„ÄÇ",
        background: "È≠îÊ≥ïÂ≠¶Èô¢"
      },
      {
        name: "ÈÖíÂ†¥„ÅÆ‰∏ª‰∫∫„Éà„É†",
        race: "„Éâ„ÉØ„Éº„Éï",
        class: "„Ç≥„É¢„Éä„Éº",
        level: 1,
        personality: "ÈôΩÊ∞ó„Åß‰∫∫Â•Ω„Åç„ÅÆ„Åô„ÇãÊÄßÊ†º„ÄÇÈÖíÂ†¥„ÅÆÊÉÖÂ†±ÂèéÈõÜÊã†ÁÇπ„ÄÇ",
        backstory: "Èï∑Âπ¥ÈÖíÂ†¥„ÇíÁµåÂñ∂„Åó„Å¶„ÅÑ„Çã„ÄÇÂ§ö„Åè„ÅÆÂÜíÈô∫ËÄÖ„Å®Áü•„ÇäÂêà„ÅÑ„ÄÇ",
        background: "ÈÖíÂ†¥ÁµåÂñ∂ËÄÖ"
      }
    ];

    for (const [index, npc] of npcs.entries()) {
      console.log(`üìù Creating NPC: ${npc.name}`);
      await createTRPGCharacter(page, npc, "NPC");
      await page.waitForTimeout(1000);
      await takeTRPGScreenshot(page, `npc-${index + 1}-created`, "npc-management");
      
      // Verify NPC appears in list
      await expect(page.locator(`text=${npc.name}`)).toBeVisible();
    }

    // Test NPC list and filtering
    await takeTRPGScreenshot(page, "all-npcs-created", "npc-management");

    // Check if there's a search or filter functionality
    const searchInput = page.locator('input[placeholder*="Ê§úÁ¥¢"], input[name*="search"]').first();
    if (await searchInput.count() > 0) {
      await searchInput.fill("ÂïÜ‰∫∫");
      await page.waitForTimeout(1000);
      await expect(page.locator(`text=${npcs[0].name}`)).toBeVisible();
      await takeTRPGScreenshot(page, "npc-search-results", "npc-management");
      
      // Clear search
      await searchInput.clear();
      await page.waitForTimeout(1000);
    }

    console.log("‚úÖ NPC management test completed");
  });

  test("should create enemies with combat attributes", async ({ page }) => {
    console.log("‚öîÔ∏è Testing: Enemy Creation with Combat Focus");

    await page.goto("/enemies");
    await verifyTRPGPageLoad(page);
    await takeTRPGScreenshot(page, "enemies-page-initial", "enemy-management");

    // Create various enemy types
    const enemies: Partial<TRPGCharacter>[] = [
      {
        name: "„Ç™„Éº„ÇØ„ÅÆÊà¶Â£´",
        race: "„Ç™„Éº„ÇØ",
        class: "„Éê„Éº„Éê„É™„Ç¢„É≥",
        level: 3,
        attributes: {
          strength: 16,
          dexterity: 12,
          constitution: 15,
          intelligence: 8,
          wisdom: 11,
          charisma: 9
        },
        hitPoints: { current: 32, maximum: 32 },
        armorClass: 14,
        personality: "Â•ΩÊà¶ÁöÑ„ÅßÈáéËõÆ„ÄÇÁæ§„Çå„ÅßË°åÂãï„Åô„Çã„Åì„Å®„ÇíÂ•Ω„ÇÄ„ÄÇ",
        backstory: "ÈÉ®Êóè„Åã„ÇâÈõ¢„Çå„ÅüÈáéÁîü„ÅÆ„Ç™„Éº„ÇØ„ÄÇÈ†òÂüü‰æµÂÖ•ËÄÖ„ÇíÊîªÊíÉ„Åô„Çã„ÄÇ"
      },
      {
        name: "Âè§‰ª£„ÅÆ„É™„ÉÉ„ÉÅ",
        race: "„Ç¢„É≥„Éá„ÉÉ„Éâ",
        class: "„Éç„ÇØ„É≠„Éû„É≥„Çµ„Éº",
        level: 15,
        attributes: {
          strength: 10,
          dexterity: 14,
          constitution: 16,
          intelligence: 20,
          wisdom: 17,
          charisma: 12
        },
        hitPoints: { current: 120, maximum: 120 },
        armorClass: 16,
        personality: "ÂÜ∑ÈÖ∑„ÅßË®àÁÆóÈ´ò„ÅÑ„ÄÇÊ∞∏ÈÅ†„ÅÆÁîüÂëΩ„ÇíÊ±Ç„ÇÅ„Å¶Á†îÁ©∂„ÇíÁ∂ö„Åë„Å¶„ÅÑ„Çã„ÄÇ",
        backstory: "„Åã„Å§„Å¶„ÅØÂÅâÂ§ß„Å™È≠îÊ≥ï‰Ωø„ÅÑ„Å†„Å£„Åü„Åå„ÄÅ‰∏çÊ≠ª„ÇíÊ±Ç„ÇÅ„Å¶„É™„ÉÉ„ÉÅ„Å®„Å™„Å£„Åü„ÄÇ"
      },
      {
        name: "„Éâ„É©„Ç¥„É≥„ÅÆÂπº‰Ωì",
        race: "„Éâ„É©„Ç¥„É≥",
        class: "„Å™„Åó",
        level: 8,
        attributes: {
          strength: 19,
          dexterity: 14,
          constitution: 17,
          intelligence: 14,
          wisdom: 13,
          charisma: 15
        },
        hitPoints: { current: 85, maximum: 85 },
        armorClass: 18,
        personality: "„Éó„É©„Ç§„Éâ„ÅåÈ´ò„Åè„ÄÅÁ∏ÑÂºµ„ÇäÊÑèË≠ò„ÅåÂº∑„ÅÑ„ÄÇÂÆùÁâ©„ÇíÈõÜ„ÇÅ„Çã„Åì„Å®„ÇíÂ•Ω„ÇÄ„ÄÇ",
        backstory: "Âè§„ÅÑÊ¥ûÁ™ü„Å´‰Ωè„ÇÄËã•„ÅÑ„Éâ„É©„Ç¥„É≥„ÄÇÊàêÈï∑„Å®„Å®„ÇÇ„Å´Âäõ„ÇíÂ¢ó„Åó„Å¶„ÅÑ„Çã„ÄÇ"
      }
    ];

    for (const [index, enemy] of enemies.entries()) {
      console.log(`‚öîÔ∏è Creating Enemy: ${enemy.name}`);
      await createTRPGCharacter(page, enemy, "Enemy");
      await page.waitForTimeout(1000);
      await takeTRPGScreenshot(page, `enemy-${index + 1}-created`, "enemy-management");
      
      // Verify enemy appears in list
      await expect(page.locator(`text=${enemy.name}`)).toBeVisible();
    }

    await takeTRPGScreenshot(page, "all-enemies-created", "enemy-management");

    // Test enemy detail view for combat information
    const firstEnemy = page.locator(`text=${enemies[0].name}`).first();
    await firstEnemy.click();
    await page.waitForTimeout(2000);
    await takeTRPGScreenshot(page, "enemy-detail-view", "enemy-management");

    // Check for combat-specific information
    const combatInfo = [
      enemies[0].hitPoints?.maximum?.toString() || "",
      enemies[0].armorClass?.toString() || "",
      enemies[0].attributes?.strength?.toString() || ""
    ];

    for (const info of combatInfo) {
      if (info) {
        await expect(page.locator(`text=${info}`)).toBeVisible();
      }
    }

    console.log("‚úÖ Enemy management test completed");
  });

  test("should edit existing character attributes and details", async ({ page }) => {
    console.log("‚úèÔ∏è Testing: Character Editing");

    await page.goto("/characters");
    await verifyTRPGPageLoad(page);

    // Get an existing character from test data
    const existingCharacterName = "„Ç®„É™„Ç¢„Çπ„Éª„Çπ„Éà„Éº„É≥„Éè„Éº„Éà"; // From test data

    await expect(page.locator(`text=${existingCharacterName}`)).toBeVisible();
    
    // Click on character to open details
    const characterCard = page.locator(`text=${existingCharacterName}`).first();
    await characterCard.click();
    await page.waitForTimeout(2000);

    // Look for edit button
    const editButton = page.locator('button:has-text("Á∑®ÈõÜ"), button:has-text("‰øÆÊ≠£"), button[aria-label*="Á∑®ÈõÜ"]').first();
    
    if (await editButton.count() > 0) {
      await editButton.click();
      await page.waitForSelector('[role="dialog"]');
      await takeTRPGScreenshot(page, "character-edit-dialog", "character-editing");

      // Modify character attributes
      const newLevel = "4";
      const levelInput = page.locator('input[name="level"], input[placeholder*="„É¨„Éô„É´"]').first();
      if (await levelInput.count() > 0) {
        await levelInput.clear();
        await levelInput.fill(newLevel);
      }

      // Modify hit points
      const hpInput = page.locator('input[name="hitPoints"], input[placeholder*="HP"]').first();
      if (await hpInput.count() > 0) {
        await hpInput.clear();
        await hpInput.fill("32");
      }

      // Add to backstory
      const backstoryInput = page.locator('textarea[name="backstory"], textarea[placeholder*="ËÉåÊôØ"]').first();
      if (await backstoryInput.count() > 0) {
        const currentBackstory = await backstoryInput.inputValue();
        await backstoryInput.fill(currentBackstory + " ÊúÄËøë„ÄÅÊñ∞„Åü„Å™‰ª≤Èñì„Å®„ÅÆÂÜíÈô∫„ÇíÈÄö„Åò„Å¶ÊàêÈï∑„ÇíÈÅÇ„Åí„Å¶„ÅÑ„Çã„ÄÇ");
      }

      // Save changes
      const saveButton = page.locator('button:has-text("‰øùÂ≠ò"), button:has-text("Êõ¥Êñ∞")').last();
      await saveButton.click();
      await page.waitForSelector('[role="dialog"]', { state: 'detached' });
      await page.waitForTimeout(2000);

      await takeTRPGScreenshot(page, "character-edited", "character-editing");

      // Verify changes were saved
      await expect(page.locator(`text=${newLevel}`)).toBeVisible();
      
      console.log("‚úÖ Character editing completed");
    } else {
      console.log("‚ö†Ô∏è Edit functionality not found - may be view-only mode");
    }
  });

  test("should manage character equipment and inventory", async ({ page }) => {
    console.log("üéí Testing: Character Equipment Management");

    await page.goto("/characters");
    await verifyTRPGPageLoad(page);

    const characterName = "„Ç®„É™„Ç¢„Çπ„Éª„Çπ„Éà„Éº„É≥„Éè„Éº„Éà";
    await expect(page.locator(`text=${characterName}`)).toBeVisible();
    
    const characterCard = page.locator(`text=${characterName}`).first();
    await characterCard.click();
    await page.waitForTimeout(2000);

    // Look for equipment/inventory section
    const equipmentSection = page.locator(
      '[data-testid*="equipment"], .equipment-section, text="Ë£ÖÂÇô", text="ÊâÄÊåÅÂìÅ"'
    ).first();

    if (await equipmentSection.count() > 0) {
      await takeTRPGScreenshot(page, "character-equipment-view", "equipment-management");

      // Look for add equipment functionality
      const addEquipmentButton = page.locator(
        'button:has-text("Ë£ÖÂÇôËøΩÂä†"), button:has-text("„Ç¢„Ç§„ÉÜ„É†ËøΩÂä†"), button[aria-label*="ËøΩÂä†"]'
      ).first();

      if (await addEquipmentButton.count() > 0) {
        await addEquipmentButton.click();
        await page.waitForTimeout(1000);

        // Add new equipment item
        const itemNameInput = page.locator('input[name*="item"], input[placeholder*="„Ç¢„Ç§„ÉÜ„É†"]').first();
        if (await itemNameInput.count() > 0) {
          await itemNameInput.fill("È≠îÊ≥ï„ÅÆÁõæ+1");
          
          const addButton = page.locator('button:has-text("ËøΩÂä†"), button:has-text("‰øùÂ≠ò")').first();
          await addButton.click();
          await page.waitForTimeout(1000);

          // Verify item was added
          await expect(page.locator("text=È≠îÊ≥ï„ÅÆÁõæ+1")).toBeVisible();
          await takeTRPGScreenshot(page, "equipment-added", "equipment-management");
        }
      }
    } else {
      console.log("‚ö†Ô∏è Equipment section not found - may not be implemented");
    }

    console.log("‚úÖ Equipment management test completed");
  });

  test("should handle character death and resurrection mechanics", async ({ page }) => {
    console.log("üíÄ Testing: Character Death/Resurrection Mechanics");

    await page.goto("/characters");
    await verifyTRPGPageLoad(page);

    const characterName = "„Ç®„É™„Ç¢„Çπ„Éª„Çπ„Éà„Éº„É≥„Éè„Éº„Éà";
    await expect(page.locator(`text=${characterName}`)).toBeVisible();
    
    const characterCard = page.locator(`text=${characterName}`).first();
    await characterCard.click();
    await page.waitForTimeout(2000);

    // Look for HP management or status controls
    const hpControls = page.locator(
      'input[name*="hp"], input[name*="hitPoints"], [data-testid*="hp"]'
    ).first();

    if (await hpControls.count() > 0) {
      // Test setting HP to 0 (death)
      await hpControls.clear();
      await hpControls.fill("0");
      
      // Look for save or update button
      const updateButton = page.locator('button:has-text("Êõ¥Êñ∞"), button:has-text("‰øùÂ≠ò")').first();
      if (await updateButton.count() > 0) {
        await updateButton.click();
        await page.waitForTimeout(2000);
        await takeTRPGScreenshot(page, "character-dead", "death-mechanics");

        // Check if character status changed (death indicators)
        const statusIndicators = page.locator(
          '.dead, .unconscious, [data-status="dead"], text="Ê≠ª‰∫°", text="Ê∞óÁµ∂"'
        );
        
        if (await statusIndicators.count() > 0) {
          console.log("‚úÖ Death status indicated");
        }

        // Test resurrection (restore HP)
        await hpControls.clear();
        await hpControls.fill("15");
        await updateButton.click();
        await page.waitForTimeout(2000);
        await takeTRPGScreenshot(page, "character-revived", "death-mechanics");
      }
    } else {
      console.log("‚ö†Ô∏è HP controls not found - testing alternative status management");
      
      // Look for status dropdown or buttons
      const statusControls = page.locator(
        'select[name*="status"], button[aria-label*="„Çπ„ÉÜ„Éº„Çø„Çπ"]'
      ).first();

      if (await statusControls.count() > 0) {
        console.log("‚úÖ Found alternative status controls");
      }
    }

    console.log("‚úÖ Death/resurrection mechanics test completed");
  });

  test("should export character sheets in different formats", async ({ page }) => {
    console.log("üìÑ Testing: Character Sheet Export");

    await page.goto("/characters");
    await verifyTRPGPageLoad(page);

    const characterName = "„Ç®„É™„Ç¢„Çπ„Éª„Çπ„Éà„Éº„É≥„Éè„Éº„Éà";
    await expect(page.locator(`text=${characterName}`)).toBeVisible();
    
    const characterCard = page.locator(`text=${characterName}`).first();
    await characterCard.click();
    await page.waitForTimeout(2000);

    // Look for export functionality
    const exportButton = page.locator(
      'button:has-text("„Ç®„ÇØ„Çπ„Éù„Éº„Éà"), button:has-text("Âá∫Âäõ"), button:has-text("Âç∞Âà∑"), [data-testid*="export"]'
    ).first();

    if (await exportButton.count() > 0) {
      await exportButton.click();
      await page.waitForTimeout(1000);
      await takeTRPGScreenshot(page, "export-options", "character-export");

      // Check for export format options
      const formatOptions = page.locator(
        'text="PDF", text="ÁîªÂÉè", text="JSON", button:has-text("PDF")'
      );

      if (await formatOptions.count() > 0) {
        console.log("‚úÖ Export format options available");
        // Note: Actual file download testing would require download handling setup
      } else {
        console.log("‚ö†Ô∏è Export format options not found");
      }
    } else {
      console.log("‚ö†Ô∏è Export functionality not found");
    }

    console.log("‚úÖ Character sheet export test completed");
  });
});