const { chromium } = require('playwright');

async function finalLocationVerification() {
  console.log('Starting final location display verification...');
  
  try {
    const browser = await chromium.launch({ 
      headless: false,
      args: ['--no-sandbox', '--disable-web-security']
    });
    const context = await browser.newContext({
      viewport: { width: 1280, height: 720 }
    });
    const page = await context.newPage();
    
    console.log('Navigating to TRPG session page...');
    await page.goto('http://localhost:5173/trpg-session', { waitUntil: 'networkidle' });
    
    // „Éï„É´„Éö„Éº„Ç∏„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
    await page.screenshot({ 
      path: 'final-location-verification.png', 
      fullPage: true 
    });
    console.log('Full page screenshot saved as final-location-verification.png');
    
    // ÂêÑË¶ÅÁ¥†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    console.log('\\n=== Final Verification Results ===');
    
    // 1. „Éò„ÉÉ„ÉÄ„Éº„ÅÆÁèæÂú®Âú∞Ë°®Á§∫
    const headerText = await page.locator('header').first().textContent();
    const hasLocationInfo = headerText && headerText.includes('Â†¥ÊâÄ„ÅÆÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
    console.log(`1. Header location display: ${hasLocationInfo ? '‚úÖ' : '‚ùå'}`);
    
    // 2. Êé¢Á¥¢„Çø„Éñ„ÅÆÈÅ∏ÊäûÁä∂ÊÖã
    const explorationTabSelected = await page.locator('button[aria-selected="true"]:has-text("Êé¢Á¥¢")').isVisible();
    console.log(`2. Exploration tab selected: ${explorationTabSelected ? '‚úÖ' : '‚ùå'}`);
    
    // 3. Â†¥ÊâÄÊÉÖÂ†±„Å™„Åó„É°„ÉÉ„Çª„Éº„Ç∏
    const noLocationMessage = await page.locator('text=üìç Â†¥ÊâÄ„ÅÆÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„Åõ„Çì').isVisible();
    console.log(`3. No location message visible: ${noLocationMessage ? '‚úÖ' : '‚ùå'}`);
    
    // 4. Â†¥ÊâÄ„ÇíÁôªÈå≤„Åô„Çã„Éú„Çø„É≥
    const registerButton = await page.locator('text=Â†¥ÊâÄ„ÇíÁôªÈå≤„Åô„Çã').isVisible();
    console.log(`4. Register location button visible: ${registerButton ? '‚úÖ' : '‚ùå'}`);
    
    // 5. Ê°àÂÜÖ„É°„ÉÉ„Çª„Éº„Ç∏
    const guidanceMessage = await page.locator('text=‰∏ñÁïåË¶≥ÊßãÁØâ ‚Üí Êã†ÁÇπ„Çø„Éñ„Åã„ÇâÂ†¥ÊâÄ„ÇíËøΩÂä†„Åß„Åç„Åæ„Åô').isVisible();
    console.log(`5. Guidance message visible: ${guidanceMessage ? '‚úÖ' : '‚ùå'}`);
    
    // 6. Êã†ÁÇπ„Çø„Éñ„Å®„ÇØ„Ç®„Çπ„Éà„Çø„Éñ„ÅÆÂ≠òÂú®
    const baseTab = await page.locator('text=Êã†ÁÇπ').isVisible();
    const questTab = await page.locator('text=„ÇØ„Ç®„Çπ„Éà').isVisible();
    console.log(`6. Base tab visible: ${baseTab ? '‚úÖ' : '‚ùå'}`);
    console.log(`7. Quest tab visible: ${questTab ? '‚úÖ' : '‚ùå'}`);
    
    // 8. Âè≥ÂÅ¥„Éë„Éç„É´Ôºà„ÉÅ„É£„ÉÉ„Éà„Å®„ÉÄ„Ç§„ÇπÔºâ
    const chatTab = await page.locator('text=„ÉÅ„É£„ÉÉ„Éà').isVisible();
    const diceTab = await page.locator('text=„ÉÄ„Ç§„Çπ').isVisible();
    console.log(`8. Chat tab visible: ${chatTab ? '‚úÖ' : '‚ùå'}`);
    console.log(`9. Dice tab visible: ${diceTab ? '‚úÖ' : '‚ùå'}`);
    
    console.log('\\n=== Summary ===');
    const allChecks = [hasLocationInfo, explorationTabSelected, noLocationMessage, registerButton, guidanceMessage, baseTab, questTab, chatTab, diceTab];
    const passedChecks = allChecks.filter(check => check).length;
    console.log(`Passed: ${passedChecks}/${allChecks.length} checks`);
    
    if (passedChecks === allChecks.length) {
      console.log('üéâ All verification checks passed!');
    } else {
      console.log('‚ö†Ô∏è Some checks failed. Please review the implementation.');
    }
    
    console.log('\\nFinal verification completed successfully');
    await browser.close();
    
  } catch (error) {
    console.error('Error during final verification:', error);
    process.exit(1);
  }
}

finalLocationVerification();